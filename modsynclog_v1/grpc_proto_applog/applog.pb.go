// 指定 proto 版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: applog.proto

// 指定包名

package grpc_proto_applog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 结构1：请求数据
type AppLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env       string            `protobuf:"bytes,1,opt,name=Env,proto3" json:"Env,omitempty"`                                                                                           // 环境 dev/prod/test/k8s等
	Sys       string            `protobuf:"bytes,2,opt,name=Sys,proto3" json:"Sys,omitempty"`                                                                                           // 系统 yxb/zuoye等
	Level     string            `protobuf:"bytes,3,opt,name=Level,proto3" json:"Level,omitempty"`                                                                                       // 级别: error/warning/info等
	File      string            `protobuf:"bytes,4,opt,name=File,proto3" json:"File,omitempty"`                                                                                         // 程序文件地址
	Func      string            `protobuf:"bytes,5,opt,name=Func,proto3" json:"Func,omitempty"`                                                                                         // 程序函数
	Time      string            `protobuf:"bytes,6,opt,name=Time,proto3" json:"Time,omitempty"`                                                                                         // 发生时间 "2022-01-01 12:12:12"
	TimeInt64 int64             `protobuf:"varint,7,opt,name=TimeInt64,proto3" json:"TimeInt64,omitempty"`                                                                              // 发生时间时间戳纳秒
	Message   string            `protobuf:"bytes,8,opt,name=Message,proto3" json:"Message,omitempty"`                                                                                   // 日志内容
	Data      map[string]string `protobuf:"bytes,9,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map格式更多数据
}

func (x *AppLogData) Reset() {
	*x = AppLogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLogData) ProtoMessage() {}

func (x *AppLogData) ProtoReflect() protoreflect.Message {
	mi := &file_applog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLogData.ProtoReflect.Descriptor instead.
func (*AppLogData) Descriptor() ([]byte, []int) {
	return file_applog_proto_rawDescGZIP(), []int{0}
}

func (x *AppLogData) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *AppLogData) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *AppLogData) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *AppLogData) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *AppLogData) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *AppLogData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *AppLogData) GetTimeInt64() int64 {
	if x != nil {
		return x.TimeInt64
	}
	return 0
}

func (x *AppLogData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AppLogData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 结构2：请求数据
type AppLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType int32  `protobuf:"varint,1,opt,name=DataType,proto3" json:"DataType,omitempty"` // 数据类型
	Data     []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`          // 内容数据
}

func (x *AppLogRequest) Reset() {
	*x = AppLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLogRequest) ProtoMessage() {}

func (x *AppLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLogRequest.ProtoReflect.Descriptor instead.
func (*AppLogRequest) Descriptor() ([]byte, []int) {
	return file_applog_proto_rawDescGZIP(), []int{1}
}

func (x *AppLogRequest) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *AppLogRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 结构3：返回数据
type AppLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode    int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMessage string `protobuf:"bytes,2,opt,name=errMessage,proto3" json:"errMessage,omitempty"`
	Data       string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppLogResponse) Reset() {
	*x = AppLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLogResponse) ProtoMessage() {}

func (x *AppLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLogResponse.ProtoReflect.Descriptor instead.
func (*AppLogResponse) Descriptor() ([]byte, []int) {
	return file_applog_proto_rawDescGZIP(), []int{2}
}

func (x *AppLogResponse) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *AppLogResponse) GetErrMessage() string {
	if x != nil {
		return x.ErrMessage
	}
	return ""
}

func (x *AppLogResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_applog_proto protoreflect.FileDescriptor

var file_applog_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x6f,
	0x67, 0x22, 0xb0, 0x02, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45,
	0x6e, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x53, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x46, 0x75, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x75,
	0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x67,
	0x2e, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x5e, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x12,
	0x54, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x6f, 0x67, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x3b, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_applog_proto_rawDescOnce sync.Once
	file_applog_proto_rawDescData = file_applog_proto_rawDesc
)

func file_applog_proto_rawDescGZIP() []byte {
	file_applog_proto_rawDescOnce.Do(func() {
		file_applog_proto_rawDescData = protoimpl.X.CompressGZIP(file_applog_proto_rawDescData)
	})
	return file_applog_proto_rawDescData
}

var file_applog_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_applog_proto_goTypes = []interface{}{
	(*AppLogData)(nil),     // 0: grpc_proto_applog.AppLogData
	(*AppLogRequest)(nil),  // 1: grpc_proto_applog.AppLogRequest
	(*AppLogResponse)(nil), // 2: grpc_proto_applog.AppLogResponse
	nil,                    // 3: grpc_proto_applog.AppLogData.DataEntry
}
var file_applog_proto_depIdxs = []int32{
	3, // 0: grpc_proto_applog.AppLogData.Data:type_name -> grpc_proto_applog.AppLogData.DataEntry
	1, // 1: grpc_proto_applog.AppLog.AppLogWrite:input_type -> grpc_proto_applog.AppLogRequest
	2, // 2: grpc_proto_applog.AppLog.AppLogWrite:output_type -> grpc_proto_applog.AppLogResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_applog_proto_init() }
func file_applog_proto_init() {
	if File_applog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_applog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppLogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_applog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_applog_proto_goTypes,
		DependencyIndexes: file_applog_proto_depIdxs,
		MessageInfos:      file_applog_proto_msgTypes,
	}.Build()
	File_applog_proto = out.File
	file_applog_proto_rawDesc = nil
	file_applog_proto_goTypes = nil
	file_applog_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AppLogClient is the client API for AppLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppLogClient interface {
	// 定义 Write 方法
	AppLogWrite(ctx context.Context, in *AppLogRequest, opts ...grpc.CallOption) (*AppLogResponse, error)
}

type appLogClient struct {
	cc grpc.ClientConnInterface
}

func NewAppLogClient(cc grpc.ClientConnInterface) AppLogClient {
	return &appLogClient{cc}
}

func (c *appLogClient) AppLogWrite(ctx context.Context, in *AppLogRequest, opts ...grpc.CallOption) (*AppLogResponse, error) {
	out := new(AppLogResponse)
	err := c.cc.Invoke(ctx, "/grpc_proto_applog.AppLog/AppLogWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppLogServer is the server API for AppLog service.
type AppLogServer interface {
	// 定义 Write 方法
	AppLogWrite(context.Context, *AppLogRequest) (*AppLogResponse, error)
}

// UnimplementedAppLogServer can be embedded to have forward compatible implementations.
type UnimplementedAppLogServer struct {
}

func (*UnimplementedAppLogServer) AppLogWrite(context.Context, *AppLogRequest) (*AppLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppLogWrite not implemented")
}

func RegisterAppLogServer(s *grpc.Server, srv AppLogServer) {
	s.RegisterService(&_AppLog_serviceDesc, srv)
}

func _AppLog_AppLogWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppLogServer).AppLogWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_proto_applog.AppLog/AppLogWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppLogServer).AppLogWrite(ctx, req.(*AppLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_proto_applog.AppLog",
	HandlerType: (*AppLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppLogWrite",
			Handler:    _AppLog_AppLogWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "applog.proto",
}
